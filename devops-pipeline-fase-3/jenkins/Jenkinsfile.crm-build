pipeline {
    agent any
    
    environment {
        // Configurazioni ambiente
        DOCKER_REGISTRY = 'localhost:5000'
        DOCKER_IMAGE_BACKEND = 'crm-backend'
        DOCKER_IMAGE_FRONTEND = 'crm-frontend'
        GIT_REPO = 'https://github.com/mcatania72/CRM-System.git'
        BRANCH = 'main'
        
        // Credenziali (da configurare in Jenkins)
        GITHUB_CREDENTIALS = credentials('github-token')
        DOCKER_CREDENTIALS = credentials('docker-registry')
    }
    
    options {
        // Opzioni pipeline
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
        skipStagesAfterUnstable()
    }
    
    triggers {
        // Trigger automatici
        githubPush()
        pollSCM('H/5 * * * *') // Polling ogni 5 minuti come fallback
    }
    
    stages {
        stage('üîÑ Checkout') {
            steps {
                echo '=== FASE: Checkout del codice ==='
                checkout scm
                
                script {
                    // Informazioni build
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    
                    env.BUILD_TIMESTAMP = sh(
                        script: 'date +"%Y%m%d_%H%M%S"',
                        returnStdout: true
                    ).trim()
                    
                    echo "Commit: ${env.GIT_COMMIT_SHORT}"
                    echo "Timestamp: ${env.BUILD_TIMESTAMP}"
                }
            }
        }
        
        stage('üîç Code Analysis') {
            parallel {
                stage('üìã Lint Backend') {
                    steps {
                        dir('backend') {
                            echo '=== LINT: Backend TypeScript ==='
                            sh 'npm install'
                            sh 'npm run lint || true' // Non bloccare se lint fallisce
                        }
                    }
                }
                
                stage('üìã Lint Frontend') {
                    steps {
                        dir('frontend') {
                            echo '=== LINT: Frontend React ==='
                            sh 'npm install'
                            sh 'npm run lint || true' // Non bloccare se lint fallisce
                        }
                    }
                }
                
                stage('üîí Security Scan') {
                    steps {
                        echo '=== SECURITY: Dependency Scan ==='
                        dir('backend') {
                            sh 'npm audit --audit-level moderate || true'
                        }
                        dir('frontend') {
                            sh 'npm audit --audit-level moderate || true'
                        }
                    }
                }
            }
        }
        
        stage('üî® Build') {
            parallel {
                stage('üèóÔ∏è Build Backend') {
                    steps {
                        dir('backend') {
                            echo '=== BUILD: Backend TypeScript ==='
                            sh 'npm install'
                            sh 'npm run build || npm run dev' // Fallback a dev se build fallisce
                        }
                    }
                    post {
                        success {
                            echo '‚úÖ Backend build completato'
                        }
                        failure {
                            echo '‚ùå Backend build fallito'
                        }
                    }
                }
                
                stage('üèóÔ∏è Build Frontend') {
                    steps {
                        dir('frontend') {
                            echo '=== BUILD: Frontend React ==='
                            sh 'npm install'
                            sh 'npm run build || npm run dev' // Fallback a dev se build fallisce
                        }
                    }
                    post {
                        success {
                            echo '‚úÖ Frontend build completato'
                        }
                        failure {
                            echo '‚ùå Frontend build fallito'
                        }
                    }
                }
            }
        }
        
        stage('üß™ Test') {
            parallel {
                stage('üß™ Test FASE 1') {
                    steps {
                        echo '=== TEST: Validazione Base (FASE 1) ==='
                        dir('devops-pipeline-fase-1') {
                            sh 'chmod +x test.sh'
                            sh './test.sh || true' // Non bloccare se test falliscono
                        }
                    }
                }
                
                stage('üß™ Test FASE 2') {
                    steps {
                        echo '=== TEST: Container (FASE 2) ==='
                        dir('devops-pipeline-fase-2') {
                            sh 'chmod +x test-containers.sh'
                            sh './test-containers.sh || true' // Non bloccare se test falliscono
                        }
                    }
                }
                
                stage('üß™ Unit Tests') {
                    steps {
                        echo '=== TEST: Unit Tests ==='
                        dir('backend') {
                            sh 'npm test || true'
                        }
                        dir('frontend') {
                            sh 'npm test || true'
                        }
                    }
                }
            }
        }
        
        stage('üê≥ Docker Build') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            
            parallel {
                stage('üê≥ Build Backend Image') {
                    steps {
                        echo '=== DOCKER: Build Backend Image ==='
                        dir('devops-pipeline-fase-2') {
                            script {
                                def backendImage = docker.build(
                                    "${DOCKER_IMAGE_BACKEND}:${env.BUILD_TIMESTAMP}",
                                    "-f containers/backend/Dockerfile ../"
                                )
                                
                                // Tag anche come latest
                                backendImage.tag("${DOCKER_IMAGE_BACKEND}:latest")
                                
                                echo "‚úÖ Backend image: ${DOCKER_IMAGE_BACKEND}:${env.BUILD_TIMESTAMP}"
                            }
                        }
                    }
                }
                
                stage('üê≥ Build Frontend Image') {
                    steps {
                        echo '=== DOCKER: Build Frontend Image ==='
                        dir('devops-pipeline-fase-2') {
                            script {
                                def frontendImage = docker.build(
                                    "${DOCKER_IMAGE_FRONTEND}:${env.BUILD_TIMESTAMP}",
                                    "-f containers/frontend/Dockerfile ../"
                                )
                                
                                // Tag anche come latest
                                frontendImage.tag("${DOCKER_IMAGE_FRONTEND}:latest")
                                
                                echo "‚úÖ Frontend image: ${DOCKER_IMAGE_FRONTEND}:${env.BUILD_TIMESTAMP}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('üöÄ Deploy to DEV') {
            when {
                branch 'main'
            }
            
            steps {
                echo '=== DEPLOY: Deploy to Development Environment ==='
                
                script {
                    try {
                        // Stop container esistenti
                        dir('devops-pipeline-fase-2') {
                            sh './deploy-containers.sh down || true'
                        }
                        
                        // Deploy nuovi container
                        dir('devops-pipeline-fase-2') {
                            sh './deploy-containers.sh start'
                        }
                        
                        // Verifica deployment
                        sleep(30) // Attendi che i container si avviino
                        
                        sh 'curl -f http://localhost:3001/api/health || exit 1'
                        sh 'curl -f http://localhost:3000 || exit 1'
                        
                        echo '‚úÖ Deploy completato con successo!'
                        
                    } catch (Exception e) {
                        echo "‚ùå Deploy fallito: ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }
        
        stage('‚úÖ Post-Deploy Tests') {
            when {
                branch 'main'
            }
            
            steps {
                echo '=== TEST: Post-Deploy Validation ==='
                
                script {
                    // Test applicazione deployed
                    sh 'curl -f http://localhost:3001/api/health'
                    sh 'curl -f http://localhost:3000'
                    
                    // Test login
                    sh '''
                        curl -X POST http://localhost:3001/api/auth/login \
                             -H "Content-Type: application/json" \
                             -d '{"email":"admin@crm.local","password":"admin123"}' | grep -q token
                    '''
                    
                    echo '‚úÖ Post-deploy tests completati'
                }
            }
        }
    }
    
    post {
        always {
            echo '=== CLEANUP: Post-build cleanup ==='
            
            // Cleanup workspace se necessario
            // cleanWs()
            
            // Archivia log e report
            archiveArtifacts artifacts: '**/*.log', allowEmptyArchive: true
            
            // Pubblica risultati test se disponibili
            publishTestResults testResultsPattern: '**/*test-results.xml', allowEmptyResults: true
        }
        
        success {
            echo 'üéâ BUILD COMPLETATO CON SUCCESSO!'
            
            // Notifica successo (da configurare)
            // slackSend(color: 'good', message: "‚úÖ CRM Build Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}")
        }
        
        failure {
            echo '‚ùå BUILD FALLITO!'
            
            // Notifica fallimento (da configurare)
            // slackSend(color: 'danger', message: "‚ùå CRM Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}")
        }
        
        unstable {
            echo '‚ö†Ô∏è BUILD INSTABILE!'
            
            // Notifica instabilit√† (da configurare)
            // slackSend(color: 'warning', message: "‚ö†Ô∏è CRM Build Unstable: ${env.JOB_NAME} - ${env.BUILD_NUMBER}")
        }
    }
}