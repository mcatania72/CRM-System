pipeline {
    agent any
    
    environment {
        NODEJS_HOME = tool 'NodeJS-18'
        PATH = "${NODEJS_HOME}/bin:${PATH}"
        REGISTRY = 'localhost:5000'
        BACKEND_IMAGE = 'crm-system-backend'
        FRONTEND_IMAGE = 'crm-system-frontend'
        DOCKER_BUILDKIT = '1'
        // Security environment
        SONAR_SCANNER_HOME = tool 'SonarScanner'
        TRIVY_VERSION = 'latest'
    }
    
    stages {
        stage('Checkout & Security Fix') {
            steps {
                echo '=== CHECKOUT & AUTO-SECURITY FIX ==='
                checkout scm
                
                script {
                    // Auto-fix delle vulnerabilit√† critiche note
                    sh '''
                        # Fix automatico cross-spawn vulnerability se presente
                        if [ -f "backend/package.json" ]; then
                            cd backend
                            if npm list cross-spawn 2>/dev/null | grep -q "cross-spawn@"; then
                                echo "üì¶ Aggiornamento cross-spawn per security fix..."
                                npm install cross-spawn@^7.0.6 --save-dev
                                echo "‚úÖ Cross-spawn security fix applicato"
                            fi
                        fi
                    '''
                }
            }
        }
        
        stage('Build Backend') {
            steps {
                echo '=== BUILD: Backend TypeScript ==='
                dir('backend') {
                    sh '''
                        echo "üì¶ Installing backend dependencies..."
                        npm ci --include=dev
                        
                        echo "üîß Building TypeScript..."
                        npm run build
                        
                        echo "‚úÖ Backend build completed"
                        ls -la dist/
                    '''
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                echo '=== BUILD: Frontend React ==='
                dir('frontend') {
                    sh '''
                        echo "üì¶ Installing frontend dependencies..."
                        npm ci --include=dev
                        
                        echo "üîß Building React app..."
                        npm run build
                        
                        echo "‚úÖ Frontend build completed"
                        ls -la dist/
                    '''
                }
            }
        }
        
        stage('SAST - Code Analysis') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        echo '=== SECURITY: Static Application Security Testing ==='
                        script {
                            try {
                                withSonarQubeEnv('SonarQube') {
                                    sh '''
                                        echo "üîç Running SonarQube analysis..."
                                        ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                                            -Dsonar.projectKey=crm-system \
                                            -Dsonar.sources=. \
                                            -Dsonar.host.url=http://localhost:9000 \
                                            -Dsonar.exclusions="**/node_modules/**,**/dist/**,**/build/**"
                                        echo "‚úÖ SonarQube analysis completed"
                                    '''
                                }
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è SonarQube not available, skipping SAST analysis"
                            }
                        }
                    }
                }
                
                stage('Dependency Audit') {
                    steps {
                        echo '=== SECURITY: NPM Audit ==='
                        script {
                            dir('backend') {
                                sh '''
                                    echo "üîç Backend npm audit..."
                                    npm audit --audit-level=moderate || echo "‚ö†Ô∏è Vulnerabilities found but continuing"
                                    npm audit --json > ../security-reports/backend-audit.json || true
                                '''
                            }
                            dir('frontend') {
                                sh '''
                                    echo "üîç Frontend npm audit..."
                                    npm audit --audit-level=moderate || echo "‚ö†Ô∏è Vulnerabilities found but continuing"
                                    npm audit --json > ../security-reports/frontend-audit.json || true
                                '''
                            }
                        }
                    }
                }
            }
        }
        
        stage('Container Build & Security') {
            parallel {
                stage('Build Containers') {
                    steps {
                        echo '=== CONTAINER: Building Images ==='
                        script {
                            sh '''
                                echo "üê≥ Building backend container..."
                                cd backend
                                docker build -t ${BACKEND_IMAGE}:latest .
                                
                                echo "üê≥ Building frontend container..."
                                cd ../frontend
                                docker build -t ${FRONTEND_IMAGE}:latest .
                                
                                echo "‚úÖ Container builds completed"
                                docker images | grep crm-system
                            '''
                        }
                    }
                }
                
                stage('Container Security Scan') {
                    steps {
                        echo '=== SECURITY: Container Vulnerability Scan ==='
                        script {
                            sh '''
                                mkdir -p security-reports
                                
                                echo "üîç Scanning backend container..."
                                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                    -v $(pwd)/security-reports:/reports \
                                    aquasec/trivy:${TRIVY_VERSION} image \
                                    --format json --output /reports/backend-trivy.json \
                                    ${BACKEND_IMAGE}:latest || echo "Backend scan completed"
                                
                                echo "üîç Scanning frontend container..."
                                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                    -v $(pwd)/security-reports:/reports \
                                    aquasec/trivy:${TRIVY_VERSION} image \
                                    --format json --output /reports/frontend-trivy.json \
                                    ${FRONTEND_IMAGE}:latest || echo "Frontend scan completed"
                                
                                echo "‚úÖ Container security scans completed"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                echo '=== DEPLOY: Container Deployment ==='
                script {
                    sh '''
                        echo "üöÄ Stopping existing containers..."
                        docker stop crm-backend crm-frontend 2>/dev/null || true
                        docker rm crm-backend crm-frontend 2>/dev/null || true
                        
                        echo "üöÄ Starting backend container..."
                        docker run -d \
                            --name crm-backend \
                            -p 3001:3001 \
                            -e NODE_ENV=production \
                            --restart unless-stopped \
                            ${BACKEND_IMAGE}:latest
                        
                        echo "üöÄ Starting frontend container..."
                        docker run -d \
                            --name crm-frontend \
                            -p 3000:80 \
                            --restart unless-stopped \
                            ${FRONTEND_IMAGE}:latest
                        
                        echo "‚è≥ Waiting for containers to start..."
                        sleep 20
                        
                        echo "‚úÖ Deployment completed"
                        docker ps --filter name=crm- --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                    '''
                }
            }
        }
        
        stage('DAST - Security Testing') {
            steps {
                echo '=== SECURITY: Dynamic Application Security Testing ==='
                script {
                    sh '''
                        mkdir -p security-reports
                        
                        # Get host IP for network connectivity
                        HOST_IP=$(hostname -I | awk '{print $1}')
                        echo "Using host IP: $HOST_IP"
                        
                        # Test connectivity first
                        echo "Testing app connectivity..."
                        curl -s http://localhost:3000 > /dev/null && echo "‚úÖ App reachable on localhost" || echo "‚ùå App not reachable on localhost"
                        curl -s http://$HOST_IP:3000 > /dev/null && echo "‚úÖ App reachable on $HOST_IP" || echo "‚ùå App not reachable on $HOST_IP"
                        
                        echo "Running ZAP scan against localhost..."
                        docker run --rm \
                            --network host \
                            -v $(pwd)/security-reports:/zap/wrk:rw \
                            -t zaproxy/zap-stable:latest zap-baseline.py \
                            -t http://localhost:3000 \
                            -J zap-baseline-report.json \
                            -r zap-baseline-report.html || echo "ZAP scan completed"
                        
                        echo "ZAP scan results:"
                        ls -la security-reports/zap-* 2>/dev/null || echo "No ZAP reports generated"
                        
                        echo "‚úÖ DAST scan completed"
                    '''
                }
            }
        }
        
        stage('Smoke Tests') {
            steps {
                echo '=== TESTING: Application Health Checks ==='
                script {
                    sh '''
                        echo "üß™ Running smoke tests..."
                        
                        # Backend health check
                        echo "Testing backend API..."
                        for i in {1..5}; do
                            if curl -f http://localhost:3001/api/health; then
                                echo "‚úÖ Backend health check: PASSED"
                                break
                            else
                                echo "‚è≥ Backend health check attempt $i/5..."
                                sleep 5
                            fi
                        done
                        
                        # Frontend accessibility check
                        echo "Testing frontend accessibility..."
                        for i in {1..3}; do
                            if curl -f http://localhost:3000; then
                                echo "‚úÖ Frontend accessibility: PASSED"
                                break
                            else
                                echo "‚è≥ Frontend accessibility attempt $i/3..."
                                sleep 5
                            fi
                        done
                        
                        echo "‚úÖ Smoke tests completed"
                    '''
                }
            }
        }
        
        stage('Security Reporting') {
            steps {
                echo '=== SECURITY: Consolidate Reports ==='
                script {
                    sh '''
                        echo "üìä Generating security summary..."
                        cd security-reports
                        
                        # Generate security summary
                        cat > security-summary.txt << EOF
Security Analysis Summary - $(date)
=====================================

NPM Audit Results:
$([ -f backend-audit.json ] && echo "Backend audit: $(cat backend-audit.json | jq -r '.metadata.totalDependencies // "N/A"') dependencies checked" || echo "Backend audit: Not available")
$([ -f frontend-audit.json ] && echo "Frontend audit: $(cat frontend-audit.json | jq -r '.metadata.totalDependencies // "N/A"') dependencies checked" || echo "Frontend audit: Not available")

Container Security Results:
$([ -f backend-trivy.json ] && echo "Backend container: Scanned" || echo "Backend container: Not scanned")
$([ -f frontend-trivy.json ] && echo "Frontend container: Scanned" || echo "Frontend container: Not scanned")

DAST Scan Results:
$(ls -1 zap-*.* 2>/dev/null | wc -l) reports generated
$([ -f zap-baseline-report.json ] && echo "ZAP JSON report: Available" || echo "ZAP JSON report: Not available")
$([ -f zap-baseline-report.html ] && echo "ZAP HTML report: Available" || echo "ZAP HTML report: Not available")

Application Status:
$(curl -s http://localhost:3001/api/health > /dev/null && echo "Backend: Healthy" || echo "Backend: Unhealthy")
$(curl -s http://localhost:3000 > /dev/null && echo "Frontend: Accessible" || echo "Frontend: Inaccessible")
EOF
                        
                        echo "üìã Security Summary:"
                        cat security-summary.txt
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo '=== POST: Cleanup & Archive ==='
            
            // Archive security reports
            script {
                sh '''
                    echo "üìÅ Archiving security reports..."
                    ls -la security-reports/ 2>/dev/null || echo "No security reports directory"
                '''
            }
            
            // Archive artifacts if they exist
            archiveArtifacts artifacts: 'security-reports/**/*', allowEmptyArchive: true
            
            // Archive build artifacts
            archiveArtifacts artifacts: 'backend/dist/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'frontend/dist/**/*', allowEmptyArchive: true
        }
        
        success {
            echo 'üéâ BUILD SUCCESS! CRM System deployed with security baseline'
            script {
                sh '''
                    echo "üèÜ Build completed successfully!"
                    echo "üåê Frontend: http://$(hostname -I | awk '{print $1}'):3000"
                    echo "üîå Backend: http://$(hostname -I | awk '{print $1}'):3001/api/health"
                    echo "üìä Jenkins: http://$(hostname -I | awk '{print $1}'):8080"
                '''
            }
        }
        
        failure {
            echo '‚ùå BUILD FAILED! Check logs for details'
            script {
                sh '''
                    echo "üîç Troubleshooting info:"
                    echo "Container status:"
                    docker ps --filter name=crm- --format "table {{.Names}}\t{{.Status}}" || true
                    echo "Recent container logs:"
                    docker logs crm-backend --tail 10 2>/dev/null || echo "No backend logs"
                    docker logs crm-frontend --tail 10 2>/dev/null || echo "No frontend logs"
                '''
            }
        }
    }
}