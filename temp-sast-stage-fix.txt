        stage('SAST - SonarQube Analysis') {
            steps {
                script {
                    echo "=== SECURITY: Static Application Security Testing ==="
                    
                    // Create sonar-project.properties first
                    sh '''
                        echo "Starting SonarQube analysis..."
                        
                        # Check if SonarQube is running
                        if curl -s http://localhost:9000/api/system/status | grep -q "UP"; then
                            echo "✅ SonarQube is running"
                            
                            # Create sonar-project.properties
                            cat > sonar-project.properties << EOF
sonar.projectKey=crm-system
sonar.projectName=CRM System
sonar.projectVersion=1.0
sonar.sources=backend/src,frontend/src
sonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/*.spec.ts,**/*.test.ts
sonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
sonar.typescript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
sonar.host.url=http://localhost:9000
EOF
                        else
                            echo "⚠️ SonarQube not available - skipping SAST analysis"
                            exit 0
                        fi
                    '''
                            
                    // Try local scanner first, fallback to Docker with credentials
                    def hasLocalScanner = sh(script: 'command -v sonar-scanner', returnStatus: true) == 0
                    
                    if (hasLocalScanner) {
                        echo "Using local sonar-scanner with withSonarQubeEnv"
                        withSonarQubeEnv('SonarQube') {
                            sh 'sonar-scanner || echo "SonarQube local scan completed with warnings"'
                        }
                    } else {
                        echo "Using Docker sonar-scanner with credentials"
                        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                            sh '''
                                docker run --rm --network=host \
                                    -v "$(pwd):/usr/src" \
                                    -e SONAR_HOST_URL=http://localhost:9000 \
                                    -e SONAR_LOGIN=${SONAR_TOKEN} \
                                    sonarsource/sonar-scanner-cli:latest \
                                    -Dsonar.host.url=http://localhost:9000 \
                                    -Dsonar.login=${SONAR_TOKEN} \
                                    -Dsonar.projectKey=crm-system \
                                    -Dsonar.projectName="CRM System" \
                                    -Dsonar.sources=backend/src,frontend/src \
                                    -Dsonar.exclusions="**/node_modules/**,**/dist/**,**/build/**" \
                                    || echo "SonarQube Docker scan completed with warnings"
                            '''
                        }
                    }
                    
                    echo "✅ SAST analysis submitted to SonarQube"
                }
            }
        }